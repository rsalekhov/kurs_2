
import random
from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from config import DATABASE_CONFIG, TELEGRAM_TOKEN
import psycopg2

print('Start telegram bot...')

state_storage = StateMemoryStorage()
bot = TeleBot(TELEGRAM_TOKEN, state_storage=state_storage)

known_users = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
userStep = {}
buttons = []

conn = psycopg2.connect(**DATABASE_CONFIG)
cursor = conn.cursor()

def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"

def get_random_word_from_user(user_id):
    cursor.execute(f"""
        SELECT target_word, translate_word, other_words
        FROM user_words{user_id}
        ORDER BY RANDOM() LIMIT 1;
    """)
    result = cursor.fetchone()
    return result

def create_user_tables(user_id):
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_info, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_info
        (
            user_id bigint NOT NULL,
            CONSTRAINT user_info_pkey PRIMARY KEY (user_id)
        )
        TABLESPACE pg_default;
    """)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_info, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    cursor.execute("""
        INSERT INTO user_info (user_id)
        VALUES (%s)
        ON CONFLICT (user_id) DO NOTHING;
    """, (user_id,))

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_words*user_id*, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS user_words{user_id}
        (
            id serial NOT NULL,
            user_id bigint NOT NULL,
            target_word character varying(255) COLLATE pg_catalog."default" NOT NULL,
            translate_word character varying(255) COLLATE pg_catalog."default" NOT NULL,
            other_words text[] COLLATE pg_catalog."default",
            CONSTRAINT user_words_{user_id}_pkey PRIMARY KEY (id),  -- –ò–∑–º–µ–Ω–∏–ª–æ—Å—å –∑–¥–µ—Å—å
            CONSTRAINT user_words_user_id_fkey FOREIGN KEY (user_id)
                REFERENCES public.user_info (user_id) MATCH SIMPLE
                ON UPDATE CASCADE
                ON DELETE CASCADE
        )
        TABLESPACE pg_default;
    """)

    conn.commit()


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()

def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        return 0

def get_random_words_from_other_words():
    cursor.execute("SELECT word FROM other_words ORDER BY RANDOM() LIMIT 3;")
    result = cursor.fetchall()
    return [row[0] for row in result]

@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT EXISTS (SELECT 1 FROM user_info WHERE user_id = %s)", (cid,))
    user_exists = cursor.fetchone()[0]

    # –°–æ–∑–¥–∞–µ–º/—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not user_exists:
        create_user_tables(cid)
        userStep[cid] = 0
        bot.send_message(cid, "Hello, stranger, let's study English...")

    markup = types.ReplyKeyboardMarkup(row_width=2)
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)


    global buttons
    buttons = []

    user_id = message.from_user.id
    cursor.execute(f"SELECT COUNT(*) FROM user_words{user_id}")
    user_words_count = cursor.fetchone()[0]

    if user_words_count == 0:
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞, –∫–æ–ø–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –∏–∑ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute(f"""
                    INSERT INTO user_words{user_id} (user_id, target_word, translate_word)
                    SELECT {user_id}, target_word, translate_word
                    FROM words_table;
                """)
        conn.commit()

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    target_word, translate, _ = get_random_word_from_user(user_id)
    random_words = get_random_words_from_other_words()

    target_word_btn = types.KeyboardButton(translate)
    buttons.append(target_word_btn)

    other_words_btns = [types.KeyboardButton(word) for word in random_words]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {target_word}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = random_words

@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    user_id = message.from_user.id
    userStep[cid] = 2

    # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_delete_word, user_id)

def process_delete_word(message, user_id):
    cid = message.chat.id
    word_to_delete = message.text.strip()

    if word_to_delete:
        # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å target_word
        cursor.execute("""
            DELETE FROM user_words{} WHERE user_id = %s AND target_word = %s;
        """.format(user_id), (user_id, word_to_delete))

        if cursor.rowcount > 0:
            conn.commit()
            print(f"Word '{word_to_delete}' deleted from the database.")
            bot.send_message(cid, f"–°–ª–æ–≤–æ '{word_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(cid, f"–°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        bot.send_message(cid, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    user_id = message.from_user.id
    userStep[cid] = 1

    # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
    bot.register_next_step_handler(message, process_new_word_english, user_id)

def process_new_word_english(message, user_id):
    cid = message.chat.id
    new_word_english = message.text.strip()

    if new_word_english:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['new_word_english'] = new_word_english

        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        bot.send_message(cid, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
        bot.register_next_step_handler(message, process_new_word_russian, user_id)
    else:
        bot.send_message(cid, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def process_new_word_russian(message, user_id):
    cid = message.chat.id
    new_word_russian = message.text.strip()

    if new_word_russian:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            new_word_english = data['new_word_english']

        # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
        cursor.execute("""
            INSERT INTO user_words{} (user_id, target_word, translate_word)
            VALUES (%s, %s, %s);
        """.format(user_id), (user_id, new_word_english, new_word_russian))

        conn.commit()
        print("Word added to the database:", new_word_english, new_word_russian)

        # –û—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Å–ª–æ–≤–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        bot.send_message(cid, "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–ª–æ–≤–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ!")

        # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        create_cards(message)
    else:
        bot.send_message(cid, "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        translate_word = data['translate_word']
        others = data['other_words']

        if text == translate_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
            hint = show_hint(*hint_text)
        elif text in others:
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{target_word}")
        else:
            hint = show_hint("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)